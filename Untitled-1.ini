Get:obtine date
Post:Trimiterea sau crearea datelor
Put:Actualizarea datelor
Delete:Stergerea datelor

HTTP 200:cerere realizata cu succes
     201 - cererea a fost procesata și în urma ei s-a creat o resursă nouă, s-au salvat niște informații. De exemplu, când un utilizator se înregistrează și pe server se creează, 
     în urma transmiterii datelor din formular, o înregistrare nouă într-un tabel, poate un folder propriu în care poate salva date proprii pe server, upload-ul unei imagini de profil etc.
     204 - cererea s-a terminat cu succes, dar răspunsul de la server nu transmite un conținut. 
     De exemplu, situația în care un utilizator și-a actualizat într-un formular informațiile de profil, și nu e nevoie să îl redirecționăm spre altă pagină/resursă
     301 - folosit pentru redirecționare în cazul în care resursa de la calea indicată de cerere a fost mutată definitiv în altă locație
     400 - cerere greșită, pe care serverul nu o poate procesa din cauza unor erori de formulare a cererii
     403 (Forbidden) - serverul nu transmite răspunsul cerut, deoarece utilizatorul nu are dreptul să acceseze acele informații/resurse.
     404 - resursă negăsita
     405 - cerere făcută cu o metodă care nu este acceptată pe acea rută (de exemplu s-a făcut o cerere de tip POST pe o rută pe care serverul așteaptă doar cereri GET)
     408 - serverul a depășit o limită de timp așteptând cererea și trimite un mesaj de timeout către client
     500 - eroare survenită la server. De exemplu o funcție din codul serverului a întâmpinat o excepție particulară pentru care nu există un cod standard HTTP de eroare
     503 - serviciul este momentan indisponibil

Pentru a inițializa proiectul, folosim
django-admin startproject [nume_proiect] .
(punctul de la final specifică calea directorului curent - proiectul va fi creat în directorul din care s-a dat comanda)
Fișierele implicite ale proiectului:
urls.py - URL-urile aplicațiilor
settings.py - fișierul cu setările aplicației
__init__.py - este un fișier specific pachetelor de python. Se execută atunci când este importat un pachet. 
Conține cod de inițializare.

Ca să pornim serverul rulăm:
python manage.py runserver

Pentru crearea unei aplicații:
python manage.py startapp aplicatie_exemplu

#def index(request):: Definește o funcție de vizualizare numită index care primește un obiect request ca argument.
#return HttpResponse("Primul raspuns"): Returnează un răspuns HTTP cu textul "Primul raspuns".
def index(request):
    return HttpResponse("Primul raspuns")

l=[]
a = request.GET.get("b", 10)
l.append(a)
return HttpResponse(f"<b>Am primit</b>: {l}")
#Dacă în URL nu este specificat niciun parametru b, atunci valoarea lui a va fi 10.
#De exemplu, dacă URL-ul este http://127.0.0.1:8000/pag2?a=7 , atunci valoarea lui a va fi 10, 
#iar dacă URL-ul este http://127.0.0.1:8000/pag2 , atunci valoarea lui a va fi 7.
#http://example.com/?text=ceva, request.GET va conține {'text': 'ceva'}, iar request.GET.get('text') va returna 'ceva'
#daca nu exista va return none


if text and text.isalpha(): verifca daca textul contine doar litere si nu este gol

response_text = "".join(f"<p>{item}</p>" for item in l1)
for item in l1: Iterează prin fiecare element din lista l1.
f"<p>{item}</p>": Pentru fiecare element item din l1, creează un șir de caractere care înconjoară 
item cu tag-urile HTML <p> și </p>. Aceasta creează un paragraf HTML pentru fiecare element.
"".join(...): Metoda join a unui șir de caractere goale ("") este folosită pentru a concatena toate șirurile de caractere generate de comprehensiunea de listă într-un singur șir de caractere. 
Fiecare element din l1 va fi transformat într-un paragraf HTML și toate aceste paragrafe vor fi concatenate într-un singur șir de caractere.
Dacă l1 conține ["text1", "text2", "text3"], atunci:
f"<p>{item}</p>" for item in l1 va genera lista ["<p>text1</p>", "<p>text2</p>", "<p>text3</p>"].
"".join(...) va concatena aceste elemente într-un singur șir de caractere: "<p>text1</p><p>text2</p><p>text3</p>".

a=int(request.GET.get("a",0)) #ca sa transoformam stringul in int
return HttpResponse("Parametrii nu sunt numere întregi.", status=400) 
#status=400: Codul de status HTTP 400 indică o cerere greșită (Bad Request). Acesta este folosit pentru a semnala că cererea clientului nu poate fi procesată din cauza unei erori de client
return HttpResponse(f"<b>Rezultatul este</b>: {numarfinal}")   
#Creează un șir de caractere HTML care afișează textul "Rezultatul este" în bold (<b>) urmat de valoarea variabilei numarfinal.

tabel_html = "<table border='1'>"
#Această linie inițializează un șir de caractere HTML care va conține tabelul. 
#Tag-ul <table> este folosit pentru a începe un tabel HTML, iar atributul border='1' adaugă o bordură de 1 pixel în jurul tabelului și celulelor sale.
tabel_html += "<tr>"
#Pentru fiecare rând din matrice, această linie adaugă un tag <tr> la șirul tabel_html. 
#Tag-ul <tr> este folosit pentru a defini un rând în tabelul HTML.
tabel_html += f"<td>{celula}</td>"
#Pentru fiecare celulă din rând, această linie adaugă un tag <td> la șirul tabel_html. 
#Tag-ul <td> este folosit pentru a defini o celulă în tabelul HTML. Conținutul celulei este valoarea celula, care este inserată în șir folosind un f-string.